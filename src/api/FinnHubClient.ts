//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

//client généré à partir du swagger disponible sur le site finnhub .le template de base a été adapté.N'ont été conservées que les méthode appelées . Les interfaces inutiles seront tree-shakées ..

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf, throwError } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class FinnHubApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://finnhub.io/api/v1";
    }

    /**
     * Symbol Lookup
     * @param q Query text can be symbol, name, isin, or cusip.
     * @return successful operation
     */
    symbolSearch(q: string): Observable<SymbolLookup> {
        let url_ = this.baseUrl + "/search?";
        if (q === undefined || q === null)
            throw new Error("The parameter 'q' must be defined and cannot be null.");
        else
            url_ += "q=" + encodeURIComponent("" + q) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSymbolSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSymbolSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(()=>e) as any as Observable<SymbolLookup>;
                }
            } else
                return _observableThrow(()=>response_) as any as Observable<SymbolLookup>;
        }));
    }

    protected processSymbolSearch(response: HttpResponseBase): Observable<SymbolLookup> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SymbolLookup;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

        /**
     * Quote
     * @param symbol Symbol
     * @return successful operation
     */
         quote(symbol: string): Observable<Quote> {
          let url_ = this.baseUrl + "/quote?";
          if (symbol === undefined || symbol === null)
              throw new Error("The parameter 'symbol' must be defined and cannot be null.");
          else
              url_ += "symbol=" + encodeURIComponent("" + symbol) + "&";
          url_ = url_.replace(/[?&]$/, "");

          let options_ : any = {
              observe: "response",
              responseType: "blob",
              headers: new HttpHeaders({
                  "Accept": "application/json"
              })
          };

          return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
              return this.processQuote(response_);
          })).pipe(_observableCatch((response_: any) => {
              if (response_ instanceof HttpResponseBase) {
                  try {
                      return this.processQuote(response_ as any);
                  } catch (e) {
                      return _observableThrow(()=>e) as any as Observable<Quote>;
                  }
              } else
                  return _observableThrow(()=>response_) as any as Observable<Quote>;
          }));
      }

      protected processQuote(response: HttpResponseBase): Observable<Quote> {
          const status = response.status;
          const responseBlob =
              response instanceof HttpResponse ? response.body :
              (response as any).error instanceof Blob ? (response as any).error : undefined;

          let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
          if (status === 200) {
              return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
              let result200: any = null;
              result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Quote;
              return _observableOf(result200);
              }));
          } else if (status !== 200 && status !== 204) {
              return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
              return throwException("An unexpected server error occurred.", status, _responseText, _headers);
              }));
          }
          return _observableOf(null as any);
      }

          /**
     * Insider Sentiment
     * @param symbol Symbol of the company: AAPL.
     * @param from From date: 2020-03-15.
     * @param to To date: 2020-03-16.
     * @return successful operation
     */
    insiderSentiment(symbol: string, from: string, to: string): Observable<InsiderSentiments> {
      let url_ = this.baseUrl + "/stock/insider-sentiment?";
      if (symbol === undefined || symbol === null)
          throw new Error("The parameter 'symbol' must be defined and cannot be null.");
      else
          url_ += "symbol=" + encodeURIComponent("" + symbol) + "&";
      if (from === undefined || from === null)
          throw new Error("The parameter 'from' must be defined and cannot be null.");
      else
          url_ += "from=" + encodeURIComponent(from ? "" + from : "null") + "&";
      if (to === undefined || to === null)
          throw new Error("The parameter 'to' must be defined and cannot be null.");
      else
          url_ += "to=" + encodeURIComponent(to ? "" + to : "null") + "&";
      url_ = url_.replace(/[?&]$/, "");

      let options_ : any = {
          observe: "response",
          responseType: "blob",
          headers: new HttpHeaders({
              "Accept": "application/json"
          })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
          return this.processInsiderSentiment(response_);
      })).pipe(_observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
              try {
                  return this.processInsiderSentiment(response_ as any);
              } catch (e) {
                  return throwError(()=>e) as any as Observable<InsiderSentiments>;
              }
          } else
              return _observableThrow(()=>response_) as any as Observable<InsiderSentiments>;
      }));
  }

  protected processInsiderSentiment(response: HttpResponseBase): Observable<InsiderSentiments> {
      const status = response.status;
      const responseBlob =
          response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
      if (status === 200) {
          return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as InsiderSentiments;
          return _observableOf(result200);
          }));
      } else if (status !== 200 && status !== 204) {
          return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          }));
      }
      return _observableOf(null as any);
  }


}

export interface StockSymbol {
    /** Symbol description */
    description?: string | null;
    /** Display symbol name. */
    displaySymbol?: string | null;
    /** Unique symbol used to identify this symbol used in <code>/stock/candle</code> endpoint. */
    symbol?: string | null;
    /** Security type. */
    type?: string | null;
    /** Primary exchange's MIC. */
    mic?: string | null;
    /** FIGI identifier. */
    figi?: string | null;
    /** Global Share Class FIGI. */
    shareClassFIGI?: string | null;
    /** Price's currency. This might be different from the reporting currency of fundamental data. */
    currency?: string | null;
    /** Alternative ticker for exchanges with multiple tickers for 1 stock such as BSE. */
    symbol2?: string | null;
    /** ISIN. This field is only available for EU stocks and selected Asian markets. Entitlement from Finnhub is required to access this field. */
    isin?: string | null;
}

export interface SymbolLookup {
    /** Array of search results. */
    result?: SymbolLookupInfo[] | null;
    /** Number of results. */
    count?: number | null;
}

export interface SymbolLookupInfo {
    /** Symbol description */
    description?: string | null;
    /** Display symbol name. */
    displaySymbol?: string | null;
    /** Unique symbol used to identify this symbol used in <code>/stock/candle</code> endpoint. */
    symbol?: string | null;
    /** Security type. */
    type?: string | null;
}

export interface CompanyProfile {
    /** Address of company's headquarter. */
    address?: string | null;
    /** City of company's headquarter. */
    city?: string | null;
    /** Country of company's headquarter. */
    country?: string | null;
    /** Currency used in company filings. */
    currency?: string | null;
    /** CUSIP number. */
    cusip?: string | null;
    /** Sedol number. */
    sedol?: string | null;
    /** Company business summary. */
    description?: string | null;
    /** Listed exchange. */
    exchange?: string | null;
    /** Industry group. */
    ggroup?: string | null;
    /** Industry. */
    gind?: string | null;
    /** Sector. */
    gsector?: string | null;
    /** Sub-industry. */
    gsubind?: string | null;
    /** ISIN number. */
    isin?: string | null;
    /** NAICS national industry. */
    naicsNationalIndustry?: string | null;
    /** NAICS industry. */
    naics?: string | null;
    /** NAICS sector. */
    naicsSector?: string | null;
    /** NAICS subsector. */
    naicsSubsector?: string | null;
    /** Company name. */
    name?: string | null;
    /** Company phone number. */
    phone?: string | null;
    /** State of company's headquarter. */
    state?: string | null;
    /** Company symbol/ticker as used on the listed exchange. */
    ticker?: string | null;
    /** Company website. */
    weburl?: string | null;
    /** IPO date. */
    ipo?: Date | null;
    /** Market Capitalization. */
    marketCapitalization?: number | null;
    /** Number of oustanding shares. */
    shareOutstanding?: number | null;
    /** Number of employee. */
    employeeTotal?: number | null;
    /** Logo image. */
    logo?: string | null;
    /** Finnhub industry classification. */
    finnhubIndustry?: string | null;
}

export interface CompanyProfile2 {
    /** Country of company's headquarter. */
    country?: string | null;
    /** Currency used in company filings. */
    currency?: string | null;
    /** Listed exchange. */
    exchange?: string | null;
    /** Company name. */
    name?: string | null;
    /** Company symbol/ticker as used on the listed exchange. */
    ticker?: string | null;
    /** IPO date. */
    ipo?: Date | null;
    /** Market Capitalization. */
    marketCapitalization?: number | null;
    /** Number of oustanding shares. */
    shareOutstanding?: number | null;
    /** Logo image. */
    logo?: string | null;
    /** Company phone number. */
    phone?: string | null;
    /** Company website. */
    weburl?: string | null;
    /** Finnhub industry classification. */
    finnhubIndustry?: string | null;
}

export interface Company {
    /** Executive name */
    name?: string | null;
    /** Age */
    age?: number | null;
    /** Title */
    title?: string | null;
    /** Year first appointed as executive/director of the company */
    since?: string | null;
    /** Sex */
    sex?: string | null;
    /** Total compensation */
    compensation?: number | null;
    /** Compensation currency */
    currency?: string | null;
}

export interface CompanyExecutive {
    /** Company symbol. */
    symbol?: string | null;
    /** Array of company's executives and members of the Board. */
    executive?: Company[] | null;
}

export interface MarketNews {
    /** News category. */
    category?: string | null;
    /** Published time in UNIX timestamp. */
    datetime?: number | null;
    /** News headline. */
    headline?: string | null;
    /** News ID. This value can be used for <code>minId</code> params to get the latest news only. */
    id?: number | null;
    /** Thumbnail image URL. */
    image?: string | null;
    /** Related stocks and companies mentioned in the article. */
    related?: string | null;
    /** News source. */
    source?: string | null;
    /** News summary. */
    summary?: string | null;
    /** URL of the original article. */
    url?: string | null;
}

export interface CompanyNews {
    /** News category. */
    category?: string | null;
    /** Published time in UNIX timestamp. */
    datetime?: number | null;
    /** News headline. */
    headline?: string | null;
    /** News ID. This value can be used for <code>minId</code> params to get the latest news only. */
    id?: number | null;
    /** Thumbnail image URL. */
    image?: string | null;
    /** Related stocks and companies mentioned in the article. */
    related?: string | null;
    /** News source. */
    source?: string | null;
    /** News summary. */
    summary?: string | null;
    /** URL of the original article. */
    url?: string | null;
}

export interface Development {
    /** Company symbol. */
    symbol?: string | null;
    /** Published time in <code>YYYY-MM-DD HH:MM:SS</code> format. */
    datetime?: string | null;
    /** Development headline. */
    headline?: string | null;
    /** Development description. */
    description?: string | null;
    /** URL. */
    url?: string | null;
}

export interface PressRelease {
    /** Company symbol. */
    symbol?: string | null;
    /** Array of major developments. */
    majorDevelopment?: Development[] | null;
}

export interface CompanyNewsStatistics {
    articlesInLastWeek?: number | null;
    buzz?: number | null;
    weeklyAverage?: number | null;
}

export interface Sentiment {
    bearishPercent?: number | null;
    bullishPercent?: number | null;
}

export interface NewsSentiment {
    /** Statistics of company news in the past week. */
    buzz?: CompanyNewsStatistics | null;
    /** News score. */
    companyNewsScore?: number | null;
    /** Sector average bullish percent. */
    sectorAverageBullishPercent?: number | null;
    /** Sectore average score. */
    sectorAverageNewsScore?: number | null;
    /** News sentiment. */
    sentiment?: Sentiment | null;
    /** Requested symbol. */
    symbol?: string | null;
}

export interface MetricSeriesMap {
}

export interface MetricMap {
}

export interface BasicFinancials {
    /** Symbol of the company. */
    symbol?: string | null;
    /** Metric type. */
    metricType?: string | null;
    /** Map key-value pair of time-series ratios. */
    series?: MetricSeriesMap | null;
    /** Map key-value pair of key ratios and metrics. */
    metric?: MetricMap | null;
}

export interface OwnershipInfo {
    /** Investor's name. */
    name?: string | null;
    /** Number of shares held by the investor. */
    share?: number | null;
    /** Number of share changed (net buy or sell) from the last period. */
    change?: number | null;
    /** Filing date. */
    filingDate?: Date | null;
}

export interface Ownership {
    /** Symbol of the company. */
    symbol?: string | null;
    /** Array of investors with detailed information about their holdings. */
    ownership?: OwnershipInfo[] | null;
}

export interface FundOwnershipInfo {
    /** Investor's name. */
    name?: string | null;
    /** Number of shares held by the investor. */
    share?: number | null;
    /** Number of share changed (net buy or sell) from the last period. */
    change?: number | null;
    /** Filing date. */
    filingDate?: Date | null;
    /** Percent of the fund's portfolio comprised of the company's share. */
    portfolioPercent?: number | null;
}

export interface FundOwnership {
    /** Symbol of the company. */
    symbol?: string | null;
    /** Array of investors with detailed information about their holdings. */
    ownership?: FundOwnershipInfo[] | null;
}

export interface Transactions {
    /** Symbol. */
    symbol?: string | null;
    /** Insider's name. */
    name?: string | null;
    /** Number of shares held after the transaction. */
    share?: number | null;
    /** Number of share changed from the last period. A positive value suggests a <code>BUY</code> transaction. A negative value suggests a <code>SELL</code> transaction. */
    change?: number | null;
    /** Filing date. */
    filingDate?: Date | null;
    /** Transaction date. */
    transactionDate?: Date | null;
    /** Average transaction price. */
    transactionPrice?: number | null;
    /** Transaction code. A list of codes and their meanings can be found <a href="https://www.sec.gov/about/forms/form4data.pdf" target="_blank" rel="noopener">here</a>. */
    transactionCode?: string | null;
}

export interface InsiderTransactions {
    /** Symbol of the company. */
    symbol?: string | null;
    /** Array of insider transactions. */
    data?: Transactions[] | null;
}

export interface InsiderSentimentsData {
    /** Symbol. */
    symbol?: string | null;
    /** Year. */
    year?: number | null;
    /** Month. */
    month?: number | null;
    /** Net buying/selling from all insiders' transactions. */
    change?: number | null;
    /** Monthly share purchase ratio. */
    mspr?: number | null;
}

export interface InsiderSentiments {
    /** Symbol of the company. */
    symbol?: string | null;
    /** Array of sentiment data. */
    data?: InsiderSentimentsData[] | null;
}

export interface FinancialMap {
}

export interface FinancialStatements {
    /** Symbol of the company. */
    symbol?: string | null;
    /** An array of map of key, value pairs containing the data for each period. */
    financials?: FinancialMap[] | null;
}

export interface ReportDataMap {
}

export interface Report {
    /** Access number. */
    accessNumber?: string | null;
    /** Symbol. */
    symbol?: string | null;
    /** CIK. */
    cik?: string | null;
    /** Year. */
    year?: number | null;
    /** Quarter. */
    quarter?: number | null;
    /** Form type. */
    form?: string | null;
    /** Period start date <code>%Y-%m-%d %H:%M:%S</code>. */
    startDate?: string | null;
    /** Period end date <code>%Y-%m-%d %H:%M:%S</code>. */
    endDate?: string | null;
    /** Filed date <code>%Y-%m-%d %H:%M:%S</code>. */
    filedDate?: string | null;
    /** Accepted date <code>%Y-%m-%d %H:%M:%S</code>. */
    acceptedDate?: string | null;
    /** Report data. */
    report?: ReportDataMap | null;
}

export interface FinancialsAsReported {
    /** Symbol */
    symbol?: string | null;
    /** CIK */
    cik?: string | null;
    /** Array of filings. */
    data?: Report[] | null;
}

export interface BreakdownItemMap {
}

export interface BreakdownItem {
    /** Access number of the report from which the data is sourced. */
    accessNumber?: string | null;
    /** Revenue breakdown. */
    breakdown?: BreakdownItemMap | null;
}

export interface RevenueBreakdown {
    /** Symbol */
    symbol?: string | null;
    /** CIK */
    cik?: string | null;
    /** Array of revenue breakdown over multiple periods. */
    data?: BreakdownItem[] | null;
}

export interface Filing {
    /** Access number. */
    accessNumber?: string | null;
    /** Symbol. */
    symbol?: string | null;
    /** CIK. */
    cik?: string | null;
    /** Form type. */
    form?: string | null;
    /** Filed date <code>%Y-%m-%d %H:%M:%S</code>. */
    filedDate?: string | null;
    /** Accepted date <code>%Y-%m-%d %H:%M:%S</code>. */
    acceptedDate?: string | null;
    /** Report's URL. */
    reportUrl?: string | null;
    /** Filing's URL. */
    filingUrl?: string | null;
}

export interface InternationalFiling {
    /** Symbol. */
    symbol?: string | null;
    /** Company name. */
    companyName?: string | null;
    /** Filed date <code>%Y-%m-%d %H:%M:%S</code>. */
    filedDate?: string | null;
    /** Category. */
    category?: string | null;
    /** Document's title. */
    title?: string | null;
    /** Document's description. */
    description?: string | null;
    /** Url. */
    url?: string | null;
    /** Language. */
    language?: string | null;
    /** Country. */
    country?: string | null;
}

export interface FilingSentiment {
    /** % of negative words in the filing. */
    negative?: number | null;
    /** % of positive words in the filing. */
    positive?: number | null;
    /** % of polarity words in the filing. */
    polarity?: number | null;
    /** % of litigious words in the filing. */
    litigious?: number | null;
    /** % of uncertainty words in the filing. */
    uncertainty?: number | null;
    /** % of constraining words in the filing. */
    constraining?: number | null;
    /** % of modal-weak words in the filing. */
    "modal-weak"?: number | null;
    /** % of modal-strong words in the filing. */
    "modal-strong"?: number | null;
    /** % of modal-moderate words in the filing. */
    "modal-moderate"?: number | null;
}

export interface SECSentimentAnalysis {
    /** Access number. */
    accessNumber?: string | null;
    /** Symbol. */
    symbol?: string | null;
    /** CIK. */
    cik?: string | null;
    /** Filing Sentiment */
    sentiment?: FilingSentiment | null;
}

export interface SimilarityIndexInfo {
    /** CIK. */
    cik?: string | null;
    /** Cosine similarity of Item 1 (Business). This number is only available for Annual reports. */
    item1?: number | null;
    /** Cosine similarity of Item 1A (Risk Factors). This number is available for both Annual and Quarterly reports. */
    item1a?: number | null;
    /** Cosine similarity of Item 2 (Management’s Discussion and Analysis of Financial Condition and Results of Operations). This number is only available for Quarterly reports. */
    item2?: number | null;
    /** Cosine similarity of Item 7 (Management’s Discussion and Analysis of Financial Condition and Results of Operations). This number is only available for Annual reports. */
    item7?: number | null;
    /** Cosine similarity of Item 7A (Quantitative and Qualitative Disclosures About Market Risk). This number is only available for Annual reports. */
    item7a?: number | null;
    /** Access number. */
    accessNumber?: string | null;
    /** Form type. */
    form?: string | null;
    /** Filed date <code>%Y-%m-%d %H:%M:%S</code>. */
    filedDate?: string | null;
    /** Accepted date <code>%Y-%m-%d %H:%M:%S</code>. */
    acceptedDate?: string | null;
    /** Report's URL. */
    reportUrl?: string | null;
    /** Filing's URL. */
    filingUrl?: string | null;
}

export interface SimilarityIndex {
    /** Symbol. */
    symbol?: string | null;
    /** CIK. */
    cik?: string | null;
    /** Array of filings with its cosine similarity compared to the same report of the previous year. */
    similarity?: SimilarityIndexInfo[] | null;
}

export interface IPOEvent {
    /** Symbol. */
    symbol?: string | null;
    /** IPO date. */
    date?: Date | null;
    /** Exchange. */
    exchange?: string | null;
    /** Company's name. */
    name?: string | null;
    /** IPO status. Can take 1 of the following values: <code>expected</code>,<code>priced</code>,<code>withdrawn</code>,<code>filed</code> */
    status?: string | null;
    /** Projected price or price range. */
    price?: string | null;
    /** Number of shares offered during the IPO. */
    numberOfShares?: number | null;
    /** Total shares value. */
    totalSharesValue?: number | null;
}

export interface IPOCalendar {
    /** Array of IPO events. */
    ipoCalendar?: IPOEvent[] | null;
}

export interface Dividends {
    /** Symbol. */
    symbol?: string | null;
    /** Ex-Dividend date. */
    date?: Date | null;
    /** Amount in local currency. */
    amount?: number | null;
    /** Adjusted dividend. */
    adjustedAmount?: number | null;
    /** Pay date. */
    payDate?: Date | null;
    /** Record date. */
    recordDate?: Date | null;
    /** Declaration date. */
    declarationDate?: Date | null;
    /** Currency. */
    currency?: string | null;
}

export interface Dividends2Info {
    /** Ex-Dividend date. */
    exDate?: Date | null;
    /** Amount in local currency. */
    amount?: number | null;
}

export interface RecommendationTrend {
    /** Company symbol. */
    symbol?: string | null;
    /** Number of recommendations that fall into the Buy category */
    buy?: number | null;
    /** Number of recommendations that fall into the Hold category */
    hold?: number | null;
    /** Updated period */
    period?: string | null;
    /** Number of recommendations that fall into the Sell category */
    sell?: number | null;
    /** Number of recommendations that fall into the Strong Buy category */
    strongBuy?: number | null;
    /** Number of recommendations that fall into the Strong Sell category */
    strongSell?: number | null;
}

export interface PriceTarget {
    /** Company symbol. */
    symbol?: string | null;
    /** Highes analysts' target. */
    targetHigh?: number | null;
    /** Lowest analysts' target. */
    targetLow?: number | null;
    /** Mean of all analysts' targets. */
    targetMean?: number | null;
    /** Median of all analysts' targets. */
    targetMedian?: number | null;
    /** Updated time of the data */
    lastUpdated?: string | null;
}

export interface UpgradeDowngrade {
    /** Company symbol. */
    symbol?: string | null;
    /** Upgrade/downgrade time in UNIX timestamp. */
    gradeTime?: number | null;
    /** From grade. */
    fromGrade?: string | null;
    /** To grade. */
    toGrade?: string | null;
    /** Company/analyst who did the upgrade/downgrade. */
    company?: string | null;
    /** Action can take any of the following values: <code>up(upgrade), down(downgrade), main(maintains), init(initiate), reit(reiterate)</code>. */
    action?: string | null;
}

export interface RevenueEstimatesInfo {
    /** Average revenue estimates including Finnhub's proprietary estimates. */
    revenueAvg?: number | null;
    /** Highest estimate. */
    revenueHigh?: number | null;
    /** Lowest estimate. */
    revenueLow?: number | null;
    /** Number of Analysts. */
    numberAnalysts?: number | null;
    /** Period. */
    period?: Date | null;
}

export interface RevenueEstimates {
    /** List of estimates */
    data?: RevenueEstimatesInfo[] | null;
    /** Frequency: annual or quarterly. */
    freq?: string | null;
    /** Company symbol. */
    symbol?: string | null;
}

export interface EbitdaEstimatesInfo {
    /** Average EBITDA estimates including Finnhub's proprietary estimates. */
    ebitdaAvg?: number | null;
    /** Highest estimate. */
    ebitdaHigh?: number | null;
    /** Lowest estimate. */
    ebitdaLow?: number | null;
    /** Number of Analysts. */
    numberAnalysts?: number | null;
    /** Period. */
    period?: Date | null;
}

export interface EbitdaEstimates {
    /** List of estimates */
    data?: EbitdaEstimatesInfo[] | null;
    /** Frequency: annual or quarterly. */
    freq?: string | null;
    /** Company symbol. */
    symbol?: string | null;
}

export interface EbitEstimatesInfo {
    /** Average EBIT estimates including Finnhub's proprietary estimates. */
    ebitAvg?: number | null;
    /** Highest estimate. */
    ebitHigh?: number | null;
    /** Lowest estimate. */
    ebitLow?: number | null;
    /** Number of Analysts. */
    numberAnalysts?: number | null;
    /** Period. */
    period?: Date | null;
}

export interface EbitEstimates {
    /** List of estimates */
    data?: EbitEstimatesInfo[] | null;
    /** Frequency: annual or quarterly. */
    freq?: string | null;
    /** Company symbol. */
    symbol?: string | null;
}

export interface EarningsEstimatesInfo {
    /** Average EPS estimates including Finnhub's proprietary estimates. */
    epsAvg?: number | null;
    /** Highest estimate. */
    epsHigh?: number | null;
    /** Lowest estimate. */
    epsLow?: number | null;
    /** Number of Analysts. */
    numberAnalysts?: number | null;
    /** Period. */
    period?: Date | null;
}

export interface EarningsEstimates {
    /** List of estimates */
    data?: EarningsEstimatesInfo[] | null;
    /** Frequency: annual or quarterly. */
    freq?: string | null;
    /** Company symbol. */
    symbol?: string | null;
}

export interface EarningResult {
    /** Actual earning result. */
    actual?: number | null;
    /** Estimated earning. */
    estimate?: number | null;
    /** Surprise - The difference between actual and estimate. */
    surprise?: number | null;
    /** Surprise percent. */
    surprisePercent?: number | null;
    /** Reported period. */
    period?: Date | null;
    /** Company symbol. */
    symbol?: string | null;
}

export interface EarningRelease {
    /** Symbol. */
    symbol?: string | null;
    /** Date. */
    date?: Date | null;
    /** Indicates whether the earnings is announced before market open(<code>bmo</code>), after market close(<code>amc</code>), or during market hour(<code>dmh</code>). */
    hour?: string | null;
    /** Earnings year. */
    year?: number | null;
    /** Earnings quarter. */
    quarter?: number | null;
    /** EPS estimate. */
    epsEstimate?: number | null;
    /** EPS actual. */
    epsActual?: number | null;
    /** Revenue estimate including Finnhub's proprietary estimates. */
    revenueEstimate?: number | null;
    /** Revenue actual. */
    revenueActual?: number | null;
}

export interface EarningsCalendar {
    /** Array of earnings release. */
    earningsCalendar?: EarningRelease[] | null;
}

export interface Quote {
    /** Open price of the day */
    o?: number | null;
    /** High price of the day */
    h?: number | null;
    /** Low price of the day */
    l?: number | null;
    /** Current price */
    c?: number | null;
    /** Previous close price */
    pc?: number | null;
    /** Change */
    d?: number | null;
    /** Percent change */
    dp?: number | null;
}

export interface StockCandles {
    /** List of open prices for returned candles. */
    o?: number[] | null;
    /** List of high prices for returned candles. */
    h?: number[] | null;
    /** List of low prices for returned candles. */
    l?: number[] | null;
    /** List of close prices for returned candles. */
    c?: number[] | null;
    /** List of volume data for returned candles. */
    v?: number[] | null;
    /** List of timestamp for returned candles. */
    t?: number[] | null;
    /** Status of the response. This field can either be ok or no_data. */
    s?: string | null;
}

export interface TickData {
    /** Symbol. */
    s?: string | null;
    /** Number of ticks skipped. */
    skip?: number | null;
    /** Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned. */
    count?: number | null;
    /** Total number of ticks for that date. */
    total?: number | null;
    /** List of volume data. */
    v?: number[] | null;
    /** List of price data. */
    p?: number[] | null;
    /** List of timestamp in UNIX ms. */
    t?: number[] | null;
    /** List of venues/exchanges. A list of exchange codes can be found <a target="_blank" href="https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing",>here</a> */
    x?: string[] | null;
    /** List of trade conditions. A comprehensive list of trade conditions code can be found <a target="_blank" href="https://docs.google.com/spreadsheets/d/1PUxiSWPHSODbaTaoL2Vef6DgU-yFtlRGZf19oBb9Hp0/edit?usp=sharing">here</a> */
    c?: string[][] | null;
}

export interface HistoricalNBBO {
    /** Symbol. */
    s?: string | null;
    /** Number of ticks skipped. */
    skip?: number | null;
    /** Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned. */
    count?: number | null;
    /** Total number of ticks for that date. */
    total?: number | null;
    /** List of Ask volume data. */
    av?: number[] | null;
    /** List of Ask price data. */
    a?: number[] | null;
    /** List of venues/exchanges - Ask price. A list of exchange codes can be found <a target="_blank" href="https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing",>here</a> */
    ax?: string[] | null;
    /** List of Bid volume data. */
    bv?: number[] | null;
    /** List of Bid price data. */
    b?: number[] | null;
    /** List of venues/exchanges - Bid price. A list of exchange codes can be found <a target="_blank" href="https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing",>here</a> */
    bx?: string[] | null;
    /** List of timestamp in UNIX ms. */
    t?: number[] | null;
    /** List of quote conditions. A comprehensive list of quote conditions code can be found <a target="_blank" href="https://docs.google.com/spreadsheets/d/1iiA6e7Osdtai0oPMOUzgAIKXCsay89dFDmsegz6OpEg/edit?usp=sharing">here</a> */
    c?: string[][] | null;
}

export interface LastBidAsk {
    /** Bid price. */
    b?: number | null;
    /** Ask price. */
    a?: number | null;
    /** Bid volume. */
    bv?: number | null;
    /** Ask volume. */
    av?: number | null;
    /** Reference UNIX timestamp in ms. */
    t?: number | null;
}

export interface Split {
    /** Symbol. */
    symbol?: string | null;
    /** Split date. */
    date?: Date | null;
    /** From factor. */
    fromFactor?: number | null;
    /** To factor. */
    toFactor?: number | null;
}

export interface Dividends2 {
    /** Symbol */
    symbol?: string | null;
    data?: Dividends2Info[] | null;
}

export interface IndicesConstituents {
    /** Index's symbol. */
    symbol?: string | null;
    /** Array of constituents. */
    constituents?: string[] | null;
}

export interface IndexHistoricalConstituent {
    /** Symbol */
    symbol?: string | null;
    /** <code>add</code> or <code>remove</code>. */
    action?: string | null;
    /** Date of joining or leaving the index. */
    date?: Date | null;
}

export interface IndicesHistoricalConstituents {
    /** Index's symbol. */
    symbol?: string | null;
    /** Array of historical constituents. */
    historicalConstituents?: IndexHistoricalConstituent[] | null;
}

export interface ETFProfileData {
    /** Name */
    name?: string | null;
    /** Asset Class. */
    assetClass?: string | null;
    /** Investment Segment. */
    investmentSegment?: string | null;
    /** AUM. */
    aum?: number | null;
    /** NAV. */
    nav?: number | null;
    /** NAV currency. */
    navCurrency?: string | null;
    /** Expense ratio. */
    expenseRatio?: number | null;
    /** Tracking Index. */
    trackingIndex?: string | null;
    /** ETF issuer. */
    etfCompany?: string | null;
    /** ETF domicile. */
    domicile?: string | null;
    /** Inception date. */
    inceptionDate?: Date | null;
    /** ETF's website. */
    website?: string | null;
    /** ISIN. */
    isin?: string | null;
    /** CUSIP. */
    cusip?: string | null;
    /** P/E. */
    priceToEarnings?: number | null;
    /** P/B. */
    priceToBook?: number | null;
    /** 30-day average volume. */
    avgVolume?: number | null;
    /** ETF's description. */
    description?: string | null;
}

export interface ETFsProfile {
    /** Symbol. */
    symbol?: string | null;
    /** Profile data. */
    profile?: ETFProfileData | null;
}

export interface ETFHoldingsData {
    /** Symbol description */
    symbol?: string | null;
    /** Security name */
    name?: string | null;
    /** ISIN. */
    isin?: string | null;
    /** CUSIP. */
    cusip?: string | null;
    /** Number of shares owned by the ETF. */
    share?: number | null;
    /** Portfolio's percent */
    percent?: number | null;
    /** Market value */
    value?: number | null;
}

export interface ETFsHoldings {
    /** ETF symbol. */
    symbol?: string | null;
    /** Holdings update date. */
    atDate?: Date | null;
    /** Number of holdings. */
    numberOfHoldings?: number | null;
    /** Array of holdings. */
    holdings?: ETFHoldingsData[] | null;
}

export interface ETFSectorExposureData {
    /** Industry */
    industry?: string | null;
    /** Percent of exposure. */
    exposure?: number | null;
}

export interface ETFsSectorExposure {
    /** ETF symbol. */
    symbol?: string | null;
    /** Array of industries and exposure levels. */
    sectorExposure?: ETFSectorExposureData[] | null;
}

export interface ETFCountryExposureData {
    /** Country */
    country?: string | null;
    /** Percent of exposure. */
    exposure?: number | null;
}

export interface ETFsCountryExposure {
    /** ETF symbol. */
    symbol?: string | null;
    /** Array of countries and and exposure levels. */
    countryExposure?: ETFCountryExposureData[] | null;
}

export interface MutualFundProfileData {
    /** Name */
    name?: string | null;
    /** Fund's category. */
    category?: string | null;
    /** Investment Segment. */
    investmentSegment?: string | null;
    /** NAV. */
    totalNav?: number | null;
    /** Expense ratio. */
    expenseRatio?: number | null;
    /** Index benchmark. */
    benchmark?: string | null;
    /** Inception date. */
    inceptionDate?: Date | null;
    /** Fund's description. */
    description?: string | null;
    /** Fund Family. */
    fundFamily?: string | null;
    /** Fund's managers. */
    manager?: string | null;
    /** Status. */
    status?: string | null;
    /** Beta. */
    beta?: number | null;
    /** Deferred load. */
    deferredLoad?: number | null;
    /** 12B-1 fee. */
    fee12b1?: number | null;
    /** Front Load. */
    frontLoad?: number | null;
    /** IRA minimum investment. */
    iraMinInvestment?: number | null;
    /** ISIN. */
    isin?: string | null;
    /** CUSIP. */
    cusip?: string | null;
    /** Max redemption fee. */
    maxRedemptionFee?: number | null;
    /** Minimum investment for standard accounts. */
    standardMinInvestment?: number | null;
    /** Turnover. */
    turnover?: number | null;
    /** Fund's series ID. This field can be used to group multiple share classes into 1 unique fund. */
    seriesId?: string | null;
    /** Fund's series name. */
    seriesName?: string | null;
    /** Class ID. */
    classId?: string | null;
    /** Class name. */
    className?: string | null;
}

export interface MutualFundProfile {
    /** Symbol. */
    symbol?: string | null;
    /** Profile data. */
    profile?: MutualFundProfileData | null;
}

export interface MutualFundHoldingsData {
    /** Symbol description */
    symbol?: string | null;
    /** Security name */
    name?: string | null;
    /** ISIN. */
    isin?: string | null;
    /** CUSIP. */
    cusip?: string | null;
    /** Number of shares. */
    share?: number | null;
    /** Portfolio's percent */
    percent?: number | null;
    /** Market value */
    value?: number | null;
}

export interface MutualFundHoldings {
    /** Symbol. */
    symbol?: string | null;
    /** Holdings update date. */
    atDate?: Date | null;
    /** Number of holdings. */
    numberOfHoldings?: number | null;
    /** Array of holdings. */
    holdings?: MutualFundHoldingsData[] | null;
}

export interface MutualFundSectorExposureData {
    /** Sector */
    sector?: string | null;
    /** Percent of exposure. */
    exposure?: number | null;
}

export interface MutualFundSectorExposure {
    /** Mutual symbol. */
    symbol?: string | null;
    /** Array of sector and exposure levels. */
    sectorExposure?: MutualFundSectorExposureData[] | null;
}

export interface MutualFundCountryExposureData {
    /** Country */
    country?: string | null;
    /** Percent of exposure. */
    exposure?: number | null;
}

export interface MutualFundCountryExposure {
    /** Symbol. */
    symbol?: string | null;
    /** Array of countries and and exposure levels. */
    countryExposure?: MutualFundCountryExposureData[] | null;
}

export interface ForexSymbol {
    /** Symbol description */
    description?: string | null;
    /** Display symbol name. */
    displaySymbol?: string | null;
    /** Unique symbol used to identify this symbol used in <code>/forex/candle</code> endpoint. */
    symbol?: string | null;
}

export interface ForexCandles {
    /** List of open prices for returned candles. */
    o?: number[] | null;
    /** List of high prices for returned candles. */
    h?: number[] | null;
    /** List of low prices for returned candles. */
    l?: number[] | null;
    /** List of close prices for returned candles. */
    c?: number[] | null;
    /** List of volume data for returned candles. */
    v?: number[] | null;
    /** List of timestamp for returned candles. */
    t?: number[] | null;
    /** Status of the response. This field can either be ok or no_data. */
    s?: string | null;
}

export interface ForexRate {
}

export interface Forexrates {
    /** Base currency. */
    base?: string | null;
    /** A map of base/quote rates for all currency pair. */
    quote?: ForexRate | null;
}

export interface CryptoSymbol {
    /** Symbol description */
    description?: string | null;
    /** Display symbol name. */
    displaySymbol?: string | null;
    /** Unique symbol used to identify this symbol used in <code>/crypto/candle</code> endpoint. */
    symbol?: string | null;
}

export interface CryptoProfile {
    /** Long name. */
    longName?: string | null;
    /** Name. */
    name?: string | null;
    /** Description. */
    description?: string | null;
    /** Project's website. */
    website?: string | null;
    /** Market capitalization. */
    marketCap?: number | null;
    /** Total supply. */
    totalSupply?: number | null;
    /** Max supply. */
    maxSupply?: number | null;
    /** Circulating supply. */
    circulatingSupply?: number | null;
    /** Logo image. */
    logo?: string | null;
    /** Launch date. */
    launchDate?: string | null;
    /** Proof type. */
    proofType?: string | null;
}

export interface CryptoCandles {
    /** List of open prices for returned candles. */
    o?: number[] | null;
    /** List of high prices for returned candles. */
    h?: number[] | null;
    /** List of low prices for returned candles. */
    l?: number[] | null;
    /** List of close prices for returned candles. */
    c?: number[] | null;
    /** List of volume data for returned candles. */
    v?: number[] | null;
    /** List of timestamp for returned candles. */
    t?: number[] | null;
    /** Status of the response. This field can either be ok or no_data. */
    s?: string | null;
}

export interface ScanPattern {
}

export interface PatternRecognition {
    /** Array of patterns. */
    points?: ScanPattern[] | null;
}

export interface SupportResistance {
    /** Array of support and resistance levels. */
    levels?: number[] | null;
}

export interface Indicator {
    /** Number of buy signals */
    buy?: number | null;
    /** Number of neutral signals */
    neutral?: number | null;
    /** Number of sell signals */
    sell?: number | null;
}

export interface TechnicalAnalysis {
    /** Number of indicators for each signal */
    count?: Indicator | null;
    /** Aggregate Signal */
    signal?: string | null;
}

export interface Trend {
    /** ADX reading */
    adx?: number | null;
    /** Whether market is trending or going sideway */
    trending?: boolean | null;
}

export interface AggregateIndicators {
    /** Number of indicator signals strong buy, buy, neutral, sell, strong sell signals. */
    technicalAnalysis?: TechnicalAnalysis | null;
    /** Whether the market is trending. */
    trend?: Trend | null;
}

export interface TechnicalIndicator {
}

export interface IndicatorFields {
}

export interface StockTranscripts {
    /** Transcript's ID used to get the <a href="#transcripts">full transcript</a>. */
    id?: string | null;
    /** Title. */
    title?: string | null;
    /** Time of the event. */
    time?: string | null;
    /** Year of earnings result in the case of earnings call transcript. */
    year?: number | null;
    /** Quarter of earnings result in the case of earnings call transcript. */
    quarter?: number | null;
}

export interface EarningsCallTranscriptsList {
    /** Company symbol. */
    symbol?: string | null;
    /** Array of transcripts' metadata */
    transcripts?: StockTranscripts[] | null;
}

export interface TranscriptContent {
    /** Speaker's name */
    name?: string | null;
    /** Speaker's speech */
    speech?: string[] | null;
    /** Earnings calls section (management discussion or Q&A) */
    session?: string | null;
}

export interface TranscriptParticipant {
    /** Participant's name */
    name?: string | null;
    /** Participant's description */
    description?: string | null;
    /** Whether the speak is a company's executive or an analyst */
    role?: string | null;
}

export interface EarningsCallTranscripts {
    /** Company symbol. */
    symbol?: string | null;
    /** Transcript content. */
    transcript?: TranscriptContent[] | null;
    /** Participant list */
    participant?: TranscriptParticipant[] | null;
    /** Audio link. */
    audio?: string | null;
    /** Transcript's ID. */
    id?: string | null;
    /** Title. */
    title?: string | null;
    /** Time of the event. */
    time?: string | null;
    /** Year of earnings result in the case of earnings call transcript. */
    year?: number | null;
    /** Quarter of earnings result in the case of earnings call transcript. */
    quarter?: number | null;
}

export interface RedditSentimentContent {
    /** Number of mentions */
    mention?: number | null;
    /** Number of positive mentions */
    positiveMention?: number | null;
    /** Number of negative mentions */
    negativeMention?: number | null;
    /** Positive score. Range 0-1 */
    positiveScore?: number | null;
    /** Negative score. Range 0-1 */
    negativeScore?: number | null;
    /** Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative */
    score?: number | null;
    /** Period. */
    atTime?: string | null;
}

export interface TwitterSentimentContent {
    /** Number of mentions */
    mention?: number | null;
    /** Number of positive mentions */
    positiveMention?: number | null;
    /** Number of negative mentions */
    negativeMention?: number | null;
    /** Positive score. Range 0-1 */
    positiveScore?: number | null;
    /** Negative score. Range 0-1 */
    negativeScore?: number | null;
    /** Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative */
    score?: number | null;
    /** Period. */
    atTime?: string | null;
}

export interface SocialSentiment {
    /** Company symbol. */
    symbol?: string | null;
    /** Reddit sentiment. */
    reddit?: RedditSentimentContent[] | null;
    /** Twitter sentiment. */
    twitter?: TwitterSentimentContent[] | null;
}

export interface InvestmentThemePortfolio {
    /** Symbol */
    symbol?: string | null;
}

export interface InvestmentThemes {
    /** Investment theme */
    theme?: string | null;
    /** Investment theme portfolio. */
    data?: InvestmentThemePortfolio[] | null;
}

export interface KeyCustomersSuppliers {
    /** Symbol */
    symbol?: string | null;
    /** Name */
    name?: string | null;
    /** Country */
    country?: string | null;
    /** Industry */
    industry?: string | null;
    /** Whether the company is a customer. */
    customer?: boolean | null;
    /** Whether the company is a supplier */
    supplier?: boolean | null;
    /** 1-month price correlation */
    oneMonthCorrelation?: number | null;
    /** 1-year price correlation */
    oneYearCorrelation?: number | null;
    /** 6-month price correlation */
    sixMonthCorrelation?: number | null;
    /** 3-month price correlation */
    threeMonthCorrelation?: number | null;
    /** 2-week price correlation */
    twoWeekCorrelation?: number | null;
    /** 2-year price correlation */
    twoYearCorrelation?: number | null;
}

export interface SupplyChainRelationships {
    /** symbol */
    symbol?: string | null;
    /** Key customers and suppliers. */
    data?: KeyCustomersSuppliers[] | null;
}

export interface CompanyESG {
    /** symbol */
    symbol?: string | null;
    /** Total ESG Score */
    totalESGScore?: number | null;
    /** Environment Score */
    environmentScore?: number | null;
    /** Governance Score */
    governanceScore?: number | null;
    /** Social Score */
    socialScore?: number | null;
    /** Map key-value pair of key ESG data points. */
    data?: CompanyESGMap | null;
}

export interface CompanyESGMap {
}

export interface CompanyEarningsQualityScore {
    /** Symbol */
    symbol?: string | null;
    /** Frequency */
    freq?: string | null;
    /** Array of earnings quality score. */
    data?: CompanyEarningsQualityScoreData[] | null;
}

export interface CompanyEarningsQualityScoreData {
    /** Period */
    period?: string | null;
    /** Growth Score */
    growth?: number | null;
    /** Profitability Score */
    profitability?: number | null;
    /** Cash Generation and Capital Allocation */
    cashGenerationCapitalAllocation?: number | null;
    /** Leverage Score */
    leverage?: number | null;
    /** Total Score */
    score?: number | null;
    /** Letter Score */
    letterScore?: string | null;
}

export interface CovidInfo {
    /** State. */
    state?: string | null;
    /** Number of confirmed cases. */
    case?: number | null;
    /** Number of confirmed deaths. */
    death?: number | null;
    /** Updated time. */
    updated?: string | null;
}

export interface FDAComitteeMeeting {
    /** Start time of the event in EST. */
    fromDate?: string | null;
    /** End time of the event in EST. */
    toDate?: string | null;
    /** Event's description. */
    eventDescription?: string | null;
    /** URL. */
    url?: string | null;
}

export interface CountryMetadata {
    /** Country name */
    country?: string | null;
    /** Alpha 2 code */
    code2?: string | null;
    /** Alpha 3 code */
    code3?: string | null;
    /** UN code */
    codeNo?: string | null;
    /** Currency name */
    currency?: string | null;
    /** Currency code */
    currencyCode?: string | null;
    /** Region */
    region?: string | null;
    /** Sub-Region */
    subRegion?: string | null;
}

export interface EconomicEvent {
    /** Actual release */
    actual?: number | null;
    /** Previous release */
    prev?: number | null;
    /** Country */
    country?: string | null;
    /** Unit */
    unit?: string | null;
    /** Estimate */
    estimate?: number | null;
    /** Event */
    event?: string | null;
    /** Impact level */
    impact?: string | null;
    /** Release time */
    time?: string | null;
}

export interface EconomicCalendar {
    /** Array of economic events. */
    economicCalendar?: EconomicEvent[] | null;
}

export interface EconomicCode {
    /** Finnhub economic code used to get historical data */
    code?: string | null;
    /** Country */
    country?: string | null;
    /** Indicator name */
    name?: string | null;
    /** Unit */
    unit?: string | null;
}

export interface EconomicDataInfo {
    /** Date of the reading */
    date?: string | null;
    /** Value */
    value?: number | null;
}

export interface EconomicData {
    /** Array of economic data for requested code. */
    data?: EconomicDataInfo[] | null;
    /** Finnhub economic code */
    code?: string | null;
}

export interface UsptoPatentResult {
    /** Symbol. */
    symbol?: string | null;
    /** Array of patents. */
    data?: UsptoPatent[] | null;
}

export interface UsptoPatent {
    /** Application Number. */
    applicationNumber?: string | null;
    /** Array of companies' name on the patent. */
    companyFilingName?: string[] | null;
    /** Filing date. */
    filingDate?: string | null;
    /** Description. */
    description?: string | null;
    /** Filing status. */
    filingStatus?: string | null;
    /** Patent number. */
    patentNumber?: string | null;
    /** Publication date. */
    publicationDate?: string | null;
    /** Patent's type. */
    patentType?: string | null;
    /** URL of the original article. */
    url?: string | null;
}

export interface VisaApplicationResult {
    /** Symbol. */
    symbol?: string | null;
    /** Array of H1b and Permanent visa applications. */
    data?: VisaApplication[] | null;
}

export interface LobbyingResult {
    /** Symbol. */
    symbol?: string | null;
    /** Array of lobbying activities. */
    data?: LobbyingData[] | null;
}

export interface UsaSpendingResult {
    /** Symbol. */
    symbol?: string | null;
    /** Array of government's spending data points. */
    data?: UsaSpending[] | null;
}

export interface UsaSpending {
    /** Symbol. */
    symbol?: string | null;
    /** Company's name. */
    recipientName?: string | null;
    /** Company's name. */
    recipientParentName?: string | null;
    /** Description. */
    awardDescription?: string | null;
    /** Recipient's country. */
    country?: string | null;
    /** Period. */
    actionDate?: string | null;
    /** Income reported by lobbying firms. */
    totalValue?: number | null;
    /** Performance start date. */
    performanceStartDate?: string | null;
    /** Performance end date. */
    performanceEndDate?: string | null;
    /** Award agency. */
    awardingAgencyName?: string | null;
    /** Award sub-agency. */
    awardingSubAgencyName?: string | null;
    /** Award office name. */
    awardingOfficeName?: string | null;
    /** Performance country. */
    performanceCountry?: string | null;
    /** Performance city. */
    performanceCity?: string | null;
    /** Performance county. */
    performanceCounty?: string | null;
    /** Performance state. */
    performanceState?: string | null;
    /** Performance zip code. */
    performanceZipCode?: string | null;
    /** Performance congressional district. */
    performanceCongressionalDistrict?: string | null;
    /** NAICS code. */
    naicsCode?: string | null;
    /** Permalink. */
    permalink?: string | null;
}

export interface LobbyingData {
    /** Symbol. */
    symbol?: string | null;
    /** Company's name. */
    name?: string | null;
    /** Description. */
    description?: string | null;
    /** Country. */
    country?: string | null;
    /** Year. */
    year?: number | null;
    /** Period. */
    period?: string | null;
    /** Income reported by lobbying firms. */
    income?: number | null;
    /** Expenses reported by the company. */
    expenses?: number | null;
    /** Document's URL. */
    documentUrl?: string | null;
    /** Posted name. */
    postedName?: string | null;
    /** Date. */
    date?: string | null;
    /** Client ID. */
    clientId?: string | null;
    /** Registrant ID. */
    registrantId?: string | null;
    /** Senate ID. */
    senateId?: string | null;
    /** House registrant ID. */
    houseregistrantId?: string | null;
}

export interface BondProfile {
    /** ISIN. */
    isin?: string | null;
    /** Cusip. */
    cusip?: string | null;
    /** FIGI. */
    figi?: string | null;
    /** Coupon. */
    coupon?: number | null;
    /** Period. */
    maturityDate?: string | null;
    /** Offering price. */
    offeringPrice?: number | null;
    /** Issue date. */
    issueDate?: string | null;
    /** Bond type. */
    bondType?: string | null;
    /** Bond type. */
    debtType?: string | null;
    /** Industry. */
    industryGroup?: string | null;
    /** Sub-Industry. */
    industrySubGroup?: string | null;
    /** Asset. */
    asset?: string | null;
    /** Asset. */
    assetType?: string | null;
    /** Dated date. */
    datedDate?: string | null;
    /** First coupon date. */
    firstCouponDate?: string | null;
    /** Offering amount. */
    originalOffering?: number | null;
    /** Outstanding amount. */
    amountOutstanding?: number | null;
    /** Payment frequency. */
    paymentFrequency?: string | null;
    /** Security level. */
    securityLevel?: string | null;
    /** Callable. */
    callable?: boolean | null;
    /** Coupon type. */
    couponType?: string | null;
}

export interface BondCandles {
    /** List of close prices for returned candles. */
    c?: number[] | null;
    /** List of timestamp for returned candles. */
    t?: number[] | null;
    /** Status of the response. This field can either be ok or no_data. */
    s?: string | null;
}

export interface VisaApplication {
    /** Year. */
    year?: number | null;
    /** Quarter. */
    quarter?: number | null;
    /** Symbol. */
    symbol?: string | null;
    /** Case number. */
    caseNumber?: string | null;
    /** Case status. */
    caseStatus?: string | null;
    /** Received date. */
    receivedDate?: string | null;
    /** Visa class. */
    visaClass?: string | null;
    /** Job Title. */
    jobTitle?: string | null;
    /** SOC Code. A list of SOC code can be found <a href="https://www.bls.gov/oes/current/oes_stru.htm" target="_blank">here</a>. */
    socCode?: string | null;
    /** Full-time position flag. */
    fullTimePosition?: string | null;
    /** Job's start date. */
    beginDate?: string | null;
    /** Job's end date. */
    endDate?: string | null;
    /** Company's name. */
    employerName?: string | null;
    /** Worksite address. */
    worksiteAddress?: string | null;
    /** Worksite city. */
    worksiteCity?: string | null;
    /** Worksite county. */
    worksiteCounty?: string | null;
    /** Worksite state. */
    worksiteState?: string | null;
    /** Worksite postal code. */
    worksitePostalCode?: string | null;
    /** Wage range from. */
    wageRangeFrom?: number | null;
    /** Wage range to. */
    wageRangeTo?: number | null;
    /** Wage unit of pay. */
    wageUnitOfPay?: string | null;
    /** Wage level. */
    wageLevel?: string | null;
    /** H1B dependent flag. */
    h1bDependent?: string | null;
}

export class FinnHubApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isFinnHubApiException = true;

    static isFinnHubApiException(obj: any): obj is FinnHubApiException {
        return obj.isFinnHubApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new FinnHubApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
